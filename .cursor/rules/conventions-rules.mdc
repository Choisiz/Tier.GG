---
alwaysApply: true
---

# 📏 Tier.GG Coding Conventions

Standards for code style, naming, and API patterns across frontend and backend.

## 🧑‍💻 Languages & Versions

- Frontend: Next.js 15 + React 19 + TypeScript 5 (see [package.json](mdc:frontend/package.json))
- Backend: Node.js + Express 5 + Sequelize 6 (see [package.json](mdc:api/package.json))

## 🧱 Project Structure

```
frontend/src/
  app/            # App Router pages & API routes
  components/     # Reusable UI components
  context/        # React contexts
  hooks/          # Custom hooks
  lib/            # Utilities and API helpers
api/
  models/         # Sequelize models (e.g., [player.js](mdc:api/models/player.js))
  server.js       # Express entrypoint
  config/         # Sequelize config
```

## ✍️ Naming

- Files: kebab-case (`champion-images.ts`), Components: PascalCase (`ChampionCard.tsx`), functions/vars: camelCase.
- DB columns: snake_case (see [database/init.sql](mdc:database/init.sql)).

## 🔁 Imports

- Order: Node/external → internal aliases (`@/*`) → relative.
- Use path alias `@/*` in frontend (see [tsconfig.json](mdc:frontend/tsconfig.json)).

## 🧪 Types & Interfaces

- Always type public function signatures.
- Use `interface` for component props and shared shapes.

## 🔐 Environment & Secrets

- Access `RIOT_API_KEY` only on server (backend, Airflow). Never expose to client.
- Use `NEXT_PUBLIC_*` only for safe, public variables.

## 🌐 API Patterns

- Frontend API (Next.js): stateless, cacheable, no API key. Example: [champion_images](mdc:frontend/src/app/api/champion_images/route.ts)
- Backend API (Express): authenticated Riot calls, custom algorithms, DB access. Example: [server.js](mdc:api/server.js)
- Error JSON shape:

```json
{ "error": "message" }
```

- Success responses return plain JSON objects with predictable fields.

## 🧰 Error Handling

- Wrap external calls with try/catch, return 4xx/5xx codes appropriately.
- Log minimal context on server (no secrets) and return safe messages to clients.

## 🗃️ Database

- Prefer Sequelize models/migrations; add indexes for hot queries.
- Keep model names singular (e.g., `Player`) and table names plural if customized.

## 🧼 Lint & Format

- Frontend: ESLint `next/core-web-vitals`, `next/typescript` (see [eslint.config.mjs](mdc:frontend/eslint.config.mjs)).
- Use Prettier-compatible formatting; avoid unrelated reformatting in edits.

## 🚀 Performance

- Frontend: use `cache` from React for idempotent fetches (see [lib/champions.ts](mdc:frontend/src/lib/champions.ts)).
- Backend: batch DB operations; add Redis for hot paths.

## 🔒 Security

- Validate query/params/body for all API endpoints.
- Enforce CORS policy in backend (see [server.js](mdc:api/server.js)).

## 🧭 Git & Reviews

- Conventional commits (`feat:`, `fix:`, `docs:`, `refactor:` ...).
- PRs require code review for cross-service changes.
