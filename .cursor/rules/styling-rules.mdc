---
alwaysApply: true
globs: frontend/**
---

# 🎨 Tier.GG Styling Rules (Frontend)

Opinionated styling guidance for the Next.js + Tailwind codebase.

## 🧩 Technologies

- Tailwind CSS v4 (see [postcss.config.js](mdc:frontend/postcss.config.js), [globals.css](mdc:frontend/src/app/globals.css))
- TypeScript + React 19
- SVG via SVGR (see [next.config.ts](mdc:frontend/next.config.ts))

## 🧱 Principles

- Prefer utility-first Tailwind classes for layout and spacing.
- Keep components small and composable; lift state when shared.
- Implement dark mode via `ThemeContext` (see [ThemeContext.tsx](mdc:frontend/src/context/ThemeContext.tsx)).

## 🧭 File Organization

- UI primitives under `src/components/ui/` (e.g., [Button.tsx](mdc:frontend/src/components/ui/button/Button.tsx)).
- Route handlers under `src/app/api/*/route.ts` for cacheable, static-like data.
- Shared utilities under `src/lib/` (e.g., [champions.ts](mdc:frontend/src/lib/champions.ts)).

## 📝 Component Conventions

- Use TypeScript `interface` for props.
- Provide sensible defaults via destructuring.
- Export components as default unless named export is needed.

```tsx
interface ComponentProps {
  className?: string;
}

const Component: React.FC<ComponentProps> = ({ className = "" }) => {
  return <div className={`rounded-lg ${className}`}>{/* content */}</div>;
};
```

## 🧩 Tailwind Usage

- Compose classes, avoid long one-liners by grouping logically.
- Use theme tokens defined in `@theme` (see [globals.css](mdc:frontend/src/app/globals.css)).
- Respect responsive breakpoints and dark variants.

## 🖼️ Images & Assets

- Use Next Image with allowed remote patterns (see [next.config.ts](mdc:frontend/next.config.ts)).
- For Riot images, prefer helpers from [champions.ts](mdc:frontend/src/lib/champions.ts).

## ♿ Accessibility

- Use semantic elements; provide `aria-*` where applicable.
- Ensure focus states are visible (Tailwind focus utilities).

## 🧪 Linting & Formatting

- Follow Next.js ESLint config (see [eslint.config.mjs](mdc:frontend/eslint.config.mjs)).
- Keep imports ordered: external → internal (`@/*`).
