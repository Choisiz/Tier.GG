version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: lol-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5433"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lol-network

  mongo:
    image: mongo:7
    container_name: lol-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - lol-network

  redis:
    image: redis:7
    container_name: lol-redis
    ports:
      - "6379:6379"
    networks:
      - lol-network

  api:
    build: ./api
    container_name: lol-api
    ports:
      - "${API_PORT}:4000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MONGODB_URL=${MONGODB_URL}
      - RIOT_API_KEY=${RIOT_API_KEY}
    depends_on:
      - postgres
      - mongo
    volumes:
      - ./api:/app:delegated # 크로스 플랫폼 호환
      - /app/node_modules
    networks:
      - lol-network

  frontend:
    build: ./frontend
    container_name: lol-frontend
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:${API_PORT}
    depends_on:
      - api
    volumes:
      - ./frontend:/app:delegated # 크로스 플랫폼 호환
      - /app/node_modules
    networks:
      - lol-network

  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: lol-airflow-webserver
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
      AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./airflow/dags:/opt/airflow/dags:delegated
      - ./airflow/logs:/opt/airflow/logs:delegated
      - ./airflow/plugins:/opt/airflow/plugins:delegated
    user: "0:0" # root로 실행 (크로스 플랫폼)
    command: webserver
    ports:
      - "8080:8080"
    networks:
      - lol-network

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: lol-airflow-scheduler
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
      AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
    volumes:
      - ./airflow/dags:/opt/airflow/dags:delegated
      - ./airflow/logs:/opt/airflow/logs:delegated
      - ./airflow/plugins:/opt/airflow/plugins:delegated
    user: "0:0" # root로 실행
    command: scheduler
    networks:
      - lol-network

  airflow-worker:
    image: apache/airflow:2.7.1
    container_name: lol-airflow-worker
    depends_on:
      - postgres
      - redis
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
      AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
    volumes:
      - ./airflow/dags:/opt/airflow/dags:delegated
      - ./airflow/logs:/opt/airflow/logs:delegated
      - ./airflow/plugins:/opt/airflow/plugins:delegated
    user: "0:0" # root로 실행
    command: celery worker
    networks:
      - lol-network

volumes:
  postgres_data:
  mongo_data:

networks:
  lol-network:
    driver: bridge
